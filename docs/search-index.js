var searchIndex = JSON.parse('{\
"aoc_utils":{"doc":"Utilities for solving Advent of Code problems in rust.","t":[0,0,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","tree","get_lines_of_type","head","ArenaTree","Node","NodeDoesNotExist","add_child_node","add_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","default","fmt","fmt","fmt","from","from","from","get_node","idx","into","into","into","len","new","parent","register_parent_node","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value"],"q":["aoc_utils","","aoc_utils::input","","aoc_utils::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Utilities for dealing with input strings.","It was on the seventh day of Advent of Code, 2022 that Ben …","Return a vector of items of type T from an input string …","Return the first 5 lines of the input string as a vector.","A tree with nodes of types Node all stored in the same …","A node in an ArenaTree","Empty struct returns when a requested node does not exist …","Add a child node with value of type T to tree with parent …","Add node with value of type T to the tree and get the …","","","","","","","Get a vector if indices of the children nodes","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get node of index idx.","Get the index of the node","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the number of nodes in the tree","Initialize a new tree with zero nodes","Get the index of the parent node","Register node at child_idx as child of node at parent_idx, …","","","","","","","","","","Arbitrary value of type T held by Node"],"i":[0,0,0,0,0,0,0,3,3,5,3,7,5,3,7,7,3,5,3,7,5,3,7,3,7,5,3,7,3,3,7,3,5,3,7,5,3,7,5,3,7,7],"f":[0,0,[1,2],[1,[[2,[1]]]],0,0,0,[[3,4],[[6,[4,5]]]],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[7,2],[[],[[3,[8]]]],[[5,9],10],[[[3,[11]],9],10],[[[7,[11]],9],10],[[]],[[]],[[]],[[3,4],[[6,[7,5]]]],[7,4],[[]],[[]],[[]],[3,4],[[],3],[7,[[12,[4]]]],[[3,4,4],[[6,[5]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],0],"p":[[15,"str"],[3,"Vec"],[3,"ArenaTree"],[15,"usize"],[3,"NodeDoesNotExist"],[4,"Result"],[3,"Node"],[8,"Default"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Option"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
