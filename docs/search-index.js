var searchIndex = JSON.parse('{\
"aoc_utils":{"doc":"Utilities for solving Advent of Code problems in rust.","t":[0,0,0,5,5,4,3,3,13,16,13,4,8,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","maze","tree","get_lines_of_type","head","Block","HashMapMaze","HashMapOccupiedMaze","ImpossibleMove","Location","LocationDoesNotExist","MazeError","NavigableMaze","Path","SingleOccupantMaze","Wall","add_loc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","from","from","from","from","from_hash_map_maze","get_value","get_value_at_loc","into","into","into","into","loc_above","loc_above","loc_above","loc_below","loc_below","loc_below","loc_left","loc_left","loc_left","loc_right","loc_right","loc_right","move_down","move_down","move_left","move_left","move_right","move_right","move_up","move_up","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","ArenaTree","Node","NodeDoesNotExist","add_child_node","add_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","default","fmt","fmt","fmt","from","from","from","get_node","idx","into","into","into","len","new","parent","register_parent_node","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value"],"q":["aoc_utils","","","aoc_utils::input","","aoc_utils::maze","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_utils::maze::Block","","aoc_utils::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Utilities for dealing with input strings.","Implementations of 2D mazes.","It was on the seventh day of Advent of Code, 2022 that Ben …","Return a vector of items of type T from an input string …","Return the first 5 lines of the input string as a vector.","Enum for defining locations in a maze which are accessible …","A 2D maze where each location and value in the maze is …","Wraps a <code>HashMapMaze</code> with a current location <code>L</code> to enable a …","Raised when a move in a 2D maze is impossible","Represents a location in a 2D maze.","Raised when a location in a 2D maze does not exist","Error type for 2D mazes and associated functions.","This trait describes a navigable maze, where each generic …","An accessible location containing an object of type <code>P</code>","This supertrait is a describes a <code>NavigableMaze</code> with state …","An inaccessible location containing an object of type <code>W</code>","Add a new location to the maze.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>HashMapOccupiedMaze</code> from a pre-existing …","Get the value of the maze at the current location.","Get the value of the maze at <code>loc</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Find the location in the 2D maze above <code>loc</code>","Find the location in the 2D maze above <code>loc</code>","Find the location in the 2D maze above <code>loc</code>","Find the location in the 2D maze below <code>loc</code>","Find the location in the 2D maze below <code>loc</code>","Find the location in the 2D maze below <code>loc</code>","Find the location in the 2D maze to the left of <code>loc</code>","Find the location in the 2D maze to the left of <code>loc</code>","Find the location in the 2D maze to the left of <code>loc</code>","Find the location in the 2D maze to the right of <code>loc</code>","Find the location in the 2D maze to the right of <code>loc</code>","Find the location in the 2D maze to the right of <code>loc</code>","Move the occupant of the maze down one","","Move the occupant of the maze to the left one","","Move the occupant of the maze to the right one","","Move the occupant of the maze up one","","Create a new <code>HashMapMaze</code> with no locations in it.","","","","","","","","","","","","","","","A tree with nodes of types Node all stored in the same …","A node in an ArenaTree","Empty struct returns when a requested node does not exist …","Add a child node with value of type T to tree with parent …","Add node with value of type T to the tree and get the …","","","","","","","Get a vector if indices of the children nodes","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get node of index idx.","Get the index of the node","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the number of nodes in the tree","Initialize a new tree with zero nodes","Get the index of the parent node","Register node at child_idx as child of node at parent_idx, …","","","","","","","","","","Arbitrary value of type T held by Node"],"i":[0,0,0,0,0,0,0,0,4,18,4,0,0,8,0,8,3,3,9,4,8,3,9,4,8,4,8,3,9,4,8,9,9,3,3,9,4,8,18,3,9,18,3,9,18,3,9,18,3,9,19,9,19,9,19,9,19,9,3,3,9,4,8,3,9,4,8,3,9,4,8,20,21,0,0,0,12,12,14,12,15,14,12,15,15,12,14,12,15,14,12,15,12,15,14,12,15,12,12,15,12,14,12,15,14,12,15,14,12,15,15],"f":[0,0,0,[1,2],[1,[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,5],6],[[[8,[7,7]],5],6],[[]],[[]],[[]],[[]],[3,[[10,[9,4]]]],[9],[3,[[10,[4]]]],[[]],[[]],[[]],[[]],[[],[[10,[4]]]],[3,[[10,[4]]]],[9,[[10,[4]]]],[[],[[10,[4]]]],[3,[[10,[4]]]],[9,[[10,[4]]]],[[],[[10,[4]]]],[3,[[10,[4]]]],[9,[[10,[4]]]],[[],[[10,[4]]]],[3,[[10,[4]]]],[9,[[10,[4]]]],[[],[[10,[4]]]],[[[9,[8]]],[[10,[4]]]],[[],[[10,[4]]]],[[[9,[8]]],[[10,[4]]]],[[],[[10,[4]]]],[[[9,[8]]],[[10,[4]]]],[[],[[10,[4]]]],[[[9,[8]]],[[10,[4]]]],[[],3],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[12,13],[[10,[13,14]]]],[12,13],[[]],[[]],[[]],[[]],[[]],[[]],[15,2],[[],[[12,[16]]]],[[14,5],6],[[[12,[7]],5],6],[[[15,[7]],5],6],[[]],[[]],[[]],[[12,13],[[10,[15,14]]]],[15,13],[[]],[[]],[[]],[12,13],[[],12],[15,[[17,[13]]]],[[12,13,13],[[10,[14]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0],"p":[[15,"str"],[3,"Vec"],[3,"HashMapMaze"],[4,"MazeError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Block"],[3,"HashMapOccupiedMaze"],[4,"Result"],[3,"TypeId"],[3,"ArenaTree"],[15,"usize"],[3,"NodeDoesNotExist"],[3,"Node"],[8,"Default"],[4,"Option"],[8,"NavigableMaze"],[8,"SingleOccupantMaze"],[13,"Path"],[13,"Wall"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
